########################
#       COMMON         #
########################

snippet func "Arrow Function"
const $1 = $2 => {
  $3
}
endsnippet

snippet fe "For Each Loop"
$1.forEach(${2:el} => {
  $3
});
endsnippet

snippet fi "For in"
for (let $1 in $2) {
  $3
}
endsnippet

snippet fo "For of"
for (let $1 of $2) {
  $3
}
endsnippet

snippet el "Event Listener"
$1.addEventListener('${2:click}', () => {
  $3
});
endsnippet

snippet ter "Ternary Operator"
$1 ? $2 : $3
endsnippet

snippet swi "Switch Statement"
switch ($1) {
  case '$2':
    $3;
    break;
  default:
    $4;
}
endsnippet

snippet dcon "DOM Constant"
const $1 = ${2:document}.querySelector('$3');
endsnippet

########################
#        Node          #
########################

snippet req "Rquire dependencies"
const $1 = require('$2');
endsnippet

snippet reqfs "Rquire fs"
const { $1 } = require('fs');
endsnippet

snippet reqpath "Rquire path"
const { $1 } = require('path');
endsnippet

snippet reqaxios "Rquire axio"
const { $1 } = require('axio');
endsnippet

snippet reqglob "Rquire glob"
const glob = require('glob');
endsnippet

snippet reqmini "Rquire minimatch"
const minimatch = require('minimatch');
endsnippet

snippet gt "Gulp task template"
const $1 = cb => {
  pump([
    src('$2'),
    $4
    dest('$3')
  ], cb);
}
endsnippet

########################
#       REACT          #
########################

snippet imp "Import modules"
import $1 from '$2';
endsnippet

snippet imprec "Import React"
import React from 'react';
endsnippet

snippet imprech "Import React w/ Hooks"
import React, { $1 } from 'react';
endsnippet

snippet impgat "Gatsby Link"
import { Link$1 } from 'gatsby';
endsnippet

snippet impprop "Import PropTypes"
import PropTypes from 'prop-types';
endsnippet

snippet impsty "Import Emotion Styled"
import styled from '@emotion/styled';
endsnippet

snippet impcx "Import Classnames"
import cx from 'classnames';
endsnippet

snippet impax "Import Axios"
import { $1 } from 'axios';
endsnippet

snippet cn "React CSS Modules className"
className={$1}
endsnippet

snippet cnx "React CSS Modules className cx"
className={cx($1)}
endsnippet

snippet sty "Styled component block"
const $1 = styled.$2`
  $3
`;

endsnippet

snippet nsty "Nested Styled component block"
$${$1} {
  $2
}
endsnippet

snippet fcomp "React component block"
const $1 = ($2) => {
  return(
    $3
  );
};

export default $1;

endsnippet

snippet gq "GraphQL Query"
export const query = graphql`
  query $1 {
    
  }
`;

endsnippet

snippet usgq "GraphQL Static Query Hook"
const data = useStaticQuery(graphql`
  query {
    $1
  }
`);

endsnippet

snippet tprop "React Proptype"
.propTypes = {
  : PropTypes.string.isRequired,
}

endsnippet

snippet dprop "React DefaultProps"
$1.defaultProps = {
  $2: $3,
};

endsnippet

snippet exd "Export Default (bundler)"
export default $1;

endsnippet

snippet rchar "React HTML Character Code conversion"
{String.fromCharCode($1)}
endsnippet

snippet rush "React useState Hook"
const [$1, set$2] = useState($3);
endsnippet

snippet rushobj "React useState Hook (object)"
const [$1, set$2] = useState({
  $3
});
endsnippet

snippet rueh "React useEffect Hooks"
useEffect(() => {
  $1
  return (
    $2
  );
}, [$3]);
endsnippet

snippet ruch "React useContext Hooks"
const [$1, set$2] = useContext($3);
endsnippet

snippet gicomp "Gatsby Image useStaticQuery component"
import React from 'react';
import { useStaticQuery, graphql } from 'gatsby';
import Img from 'gatsby-image';

const sizing = {
  ${9:height}: '$6px',
  ${8:width}: '$7px',
};

const wrap = {
  ...sizing,
};

const image = {
  ...sizing,
};

const $1 = () => {
  const data = useStaticQuery(graphql`
    query {
      imageSharp($3: { originalName: { eq: \"$2\" } }) {
        $3(${8:width}: $5) {
          ...GatsbyImageSharp$4_withWebp
        }
      }
    }
  `);
  return (
    <>
      {data.imageSharp && (
        <Img
          $3={data.imageSharp.$3}
          alt=\"$10\"
          style={wrap}
          imgStyle={image}
        />
      )}
    </>
  );
};

export default $1;

endsnippet
